// Generated by CodiumAI

describe("SignUp", () => {});

// Clicking the "Continue with Google" button should not throw any errors.
it('should not throw any errors when clicking the "Continue with Google" button', () => {
  // Mock the fetch function
  global.fetch = jest.fn(() => Promise.resolve({ ok: true }));

  // Render the SignUp component
  const { getByText } = render(<SignUp />);

  // Click the "Continue with Google" button
  fireEvent.click(getByText("Continue with Google"));

  // Assert that no errors were thrown
  expect(global.fetch).toHaveBeenCalled();
});

// Submitting the form with an empty username, email, or password should not log any form data to the console.
it("should not log form data when submitting with empty fields", () => {
  const consoleSpy = jest.spyOn(console, "log");
  const wrapper = shallow(<SignUp />);
  const form = wrapper.find("form");
  form.simulate("submit", { preventDefault: jest.fn() });
  expect(consoleSpy).not.toHaveBeenCalled();
  consoleSpy.mockRestore();
});

// Submitting the form with valid username, email, and password should log the form data to the console.
it("should log form data to the console when submitting the form with valid username, email, and password", () => {
  // Mock the fetch function
  global.fetch = jest.fn(() =>
    Promise.resolve({
      ok: true,
    })
  );

  // Render the SignUp component
  const { getByLabelText, getByText } = render(<SignUp />);

  // Fill in the form fields
  fireEvent.change(getByLabelText("Username"), {
    target: { value: "testuser" },
  });
  fireEvent.change(getByLabelText("Email"), {
    target: { value: "test@example.com" },
  });
  fireEvent.change(getByLabelText("Password"), {
    target: { value: "password123" },
  });

  // Submit the form
  fireEvent.click(getByText("Sign Up"));

  // Check if the form data is logged to the console
  expect(console.log).toHaveBeenCalledWith({
    username: "testuser",
    email: "test@example.com",
    password: "password123",
  });
});

// Submitting the form with an invalid email format (e.g. missing '@' symbol) should not log any form data to the console.
it("should not log form data when email format is invalid", () => {
  const mockFetch = jest.fn();
  global.fetch = mockFetch;

  const { getByLabelText, getByText } = render(<SignUp />);

  const usernameInput = getByLabelText("Username");
  const emailInput = getByLabelText("Email");
  const passwordInput = getByLabelText("Password");
  const signUpButton = getByText("Sign Up");

  fireEvent.change(usernameInput, { target: { value: "testuser" } });
  fireEvent.change(emailInput, { target: { value: "invalidemail" } });
  fireEvent.change(passwordInput, { target: { value: "testpassword" } });

  fireEvent.click(signUpButton);

  expect(mockFetch).not.toHaveBeenCalled();
});

// Clicking the "Sign In" link should navigate to the "/signin" route.
it('should navigate to "/signin" route when clicking "Sign In" link', () => {
  // Mock the necessary dependencies
  const mockHistory = {
    push: jest.fn(),
  };
  const mockLink = jest
    .fn()
    .mockReturnValue(
      <div onClick={() => mockHistory.push("/signin")}>Sign In</div>
    );

  // Render the component with the mocked dependencies
  render(
    <Router>
      <SignUp />
      <Link as={mockLink} />
    </Router>
  );

  // Simulate clicking the "Sign In" link
  fireEvent.click(screen.getByText("Sign In"));

  // Verify that the history.push function was called with the correct route
  expect(mockHistory.push).toHaveBeenCalledWith("/signin");
});

// Typing in the username input should update the formData state with the correct value.
it("should update formData state when typing in the username input", () => {
  // Arrange
  const { getByLabelText } = render(<SignUp />);
  const usernameInput = getByLabelText("Username");

  // Act
  fireEvent.change(usernameInput, { target: { value: "testuser" } });

  // Assert
  expect(usernameInput.value).toBe("testuser");
});

// Typing in the password input should update the formData state with the correct value.
it("should update formData state when typing in the password input", () => {
  const wrapper = shallow(<SignUp />);
  const passwordInput = wrapper.find("#password");
  passwordInput.simulate("change", {
    target: { id: "password", value: "test123" },
  });
  expect(wrapper.state("formData")).toEqual({ password: "test123" });
});

// Typing in the email input should update the formData state with the correct value.
it("should update formData state when typing in the email input", () => {
  // Arrange
  const { getByLabelText } = render(<SignUp />);
  const emailInput = getByLabelText("Email");
  const email = "test@example.com";

  // Act
  fireEvent.change(emailInput, { target: { value: email } });

  // Assert
  expect(emailInput.value).toBe(email);
  expect(formData.email).toBe(email);
});

// Submitting the form with a password that is too short (less than 8 characters) should not log any form data to the console.
it("should not log form data when password is too short", () => {
  const consoleSpy = jest.spyOn(console, "log");
  const wrapper = shallow(<SignUp />);
  const form = wrapper.find("form");
  const passwordInput = wrapper.find("#password");

  passwordInput.simulate("change", {
    target: { id: "password", value: "pass" },
  });
  form.simulate("submit");

  expect(consoleSpy).not.toHaveBeenCalled();
});
